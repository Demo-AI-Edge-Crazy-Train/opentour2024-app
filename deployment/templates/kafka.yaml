apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kafka
    app.kubernetes.io/component: kafka
    app.kubernetes.io/instance: kafka
    app.kubernetes.io/name: kafka
    app.kubernetes.io/part-of: train
  name: kafka
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: kafka
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: kafka
        deployment: kafka
    spec:
      containers:
      - image: {{ include "image" (dict "Values" .Values "name" "strimzi") | quote }}
        imagePullPolicy: {{ include "imagePullPolicy" (dict "Values" .Values "name" "strimzi") | quote }}
        name: kafka
        command: 
        - /bin/sh
        args:
        - -c
        - >
          until echo > /dev/tcp/localhost/2181; do
            echo 'Waiting for Zookeeper...'
            sleep 1
          done;
          echo 'Zookeeper is ready.';
          bin/kafka-server-start.sh config/server.properties --override replica.fetch.max.bytes=3000000 --override message.max.bytes=3000000 --override listener.security.protocol.map=${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP} --override listeners=${KAFKA_LISTENERS} --override advertised.listeners=${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=${KAFKA_ZOOKEEPER_CONNECT}
        env:
        - name: LOG_DIR
          value: /tmp/logs
        - name: KAFKA_BROKER_ID
          value: "1"
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
        - name: KAFKA_LISTENERS
          value: "PLAINTEXT://:29092,PLAINTEXT_HOST://:9092"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "localhost:2181"
        - name: KAFKA_GROUP_MAX_SESSION_TIMEOUT_MS
          value: "600000"
        - name: KAFKA_REPLICATION_FACTOR
          value: "1"
        ports:
        - containerPort: 29092
          protocol: TCP
        - containerPort: 9092
          protocol: TCP
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      - image: {{ include "image" (dict "Values" .Values "name" "strimzi") | quote }}
        imagePullPolicy: {{ include "imagePullPolicy" (dict "Values" .Values "name" "strimzi") | quote }}
        name: zookeeper
        command: 
        - /bin/sh
        args:
        - -c
        - >
          bin/zookeeper-server-start.sh config/zookeeper.properties
        env:
        - name: LOG_DIR
          value: /tmp/logs
        ports:
        - containerPort: 2181
          protocol: TCP
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      serviceAccountName: train
      serviceAccount: train
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kafka
    app.kubernetes.io/component: kafka
    app.kubernetes.io/instance: kafka
    app.kubernetes.io/name: kafka
    app.kubernetes.io/part-of: train
  name: kafka
spec:
  ports:
  - name: kafka-plainhost
    port: 9092
  - name: kafka-plain
    port: 29092
  - name: zookeeper
    port: 2181
  selector:
    app: kafka
    deployment: kafka
